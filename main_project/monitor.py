# originally uploaded to github.com/lowkeycrack '.py' format
#
# Created by: krish_Jha@lowkeycrack
#
# WARNING: Any manual changes made to this file will result in some errors i've been there i know how it goes
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal
import scapy.all as scapy
from random import choice
class Ui_MainWindow(object):
    panda_banner="""
⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡗⠀⠀⠉⠑⢢⣴⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡶⢢⠀⠀⠀⠀⠀⠀⠀⠀⠻⠋⠀⠀⠀⠀⠀⢿⣿⠿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠳⢝⢧⡀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣄⠙⠄⠀⠀⠀⢀⠇⢠⡄⠀⠀⣄⡀⠀⠀⠀⣴⣄⠘⡀⠀⠀⠀⠀⠀⠀⠀⣀⣤⡴⠶⢚⣫⣵⡶⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⡅⣤⣀⠃⠀⠘⠀⢿⠇⠀⠸⣿⣿⡄⠀⠀⣿⣿⣷⣷⣄⠀⠀⠀⠀⣀⣸⣿⡀⠸⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠛⠁⣹⣿⣷⣦⣤⣶⡄⢀⣀⠀⠙⠋⠁⣠⣾⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⡟⢰⣿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢷⣾⣿⣿⣿⣿⣿⣿⣿⣌⣋⣀⣀⣠⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣈⣯⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠿⣿⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⡿⠟⠿⣿⣿⠿⠛⠁⠀⠀⠀⠀⠈⢿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡔⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⣀⣠⣾⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⡿⠛⠒⠚⠀⠀⠙⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢼⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠛⠛⠋⠉⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⠿⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀"""
    panda3_logo="""
    
    -----------------------------
        ⠀⣴⣿⣿⣿⠦⠀⠒⠒⠀⠴⣿⣿⣿⣦⠀
        ⠸⣿⡟⢉⣀⣀⡀⠀⠀⢀⣀⣀⡙⢿⣿⠇
        ⠀⠙⠀⣾⣿⢟⣽⠶⠶⣯⡻⣿⣷⠈⠏⠀
        ⠀⢀⠀⠙⠱⠟⢋⣤⣤⠙⠿⠞⠃⠀⡀⠀
        ⠀⡀⢢⡀⠀⠀⠀⡛⢛⠀⠀⠀⢀⡐⢀⠀
        ⠀⣿⣶⣭⡂⠤⣀⣀⣀⣀⠤⢐⣭⣴⣿⠀
        ⠀⠙⢿⣿⣿⡿⢦⡄⢠⡴⢿⣿⣿⡿⠋⠀
        ⠀⠀⠀⠙⠌⢿⠀⡚⡎⢀⡟⠱⠋⠀⠀⠀
    """
    recorded_ips=[]
    colors = ['blue', 'green', 'purple', 'orange', 'brown', 'darkred', 'darkblue', 'darkgreen', 'darkcyan', 'darkmagenta']
    def setupUi(self, MainWindow):
        
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(805, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.mainmonitor = QtWidgets.QTextEdit(self.centralwidget)
        self.mainmonitor.setGeometry(QtCore.QRect(0, 0, 801, 341))
        self.mainmonitor.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.mainmonitor.setFrameShadow(QtWidgets.QFrame.Plain)
        self.mainmonitor.setLineWidth(2)
        self.mainmonitor.setObjectName("mainmonitor")
        self.mainmonitor.setHtml(self.panda_banner)
        self.mainmonitor.setReadOnly(True)
        self.IPs = QtWidgets.QTextEdit(self.centralwidget)
        self.IPs.setGeometry(QtCore.QRect(0, 340, 231, 211))
        self.IPs.setFrameShape(QtWidgets.QFrame.Box)
        self.IPs.setFrameShadow(QtWidgets.QFrame.Raised)
        self.IPs.setLineWidth(2)
        self.IPs.setObjectName("IPs")
        self.IPs.setStyleSheet("font-size:15px;")
        self.IPs.setHtml(f"<font color='black'>{self.panda3_logo}</font>")
        self.Packets_count = QtWidgets.QTextEdit(self.centralwidget)
        self.Packets_count.setGeometry(QtCore.QRect(230, 340, 251, 211))
        self.Packets_count.setFrameShape(QtWidgets.QFrame.Box)
        self.Packets_count.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Packets_count.setMidLineWidth(1)
        self.Packets_count.setObjectName("Packets_count")
        self.saerchbutton = QtWidgets.QPushButton(self.centralwidget)
        self.saerchbutton.setGeometry(QtCore.QRect(719, 350, 71, 31))
        self.saerchbutton.setObjectName("saerchbutton")
        self.stop_button = QtWidgets.QPushButton(self.centralwidget)
        self.stop_button.setGeometry(QtCore.QRect(380, 500, 90, 36))
        self.stop_button.setObjectName("stop_button")
        self.Searchresultbox = QtWidgets.QTextEdit(self.centralwidget)
        self.Searchresultbox.setGeometry(QtCore.QRect(480, 380, 321, 171))
        self.Searchresultbox.setObjectName("Searchresultbox")
        self.clearbutton = QtWidgets.QPushButton(self.centralwidget)
        self.clearbutton.setGeometry(QtCore.QRect(380, 460, 90, 36))
        self.clearbutton.setObjectName("clearbutton")
        self.search_clearbutton = QtWidgets.QPushButton(self.centralwidget)
        self.search_clearbutton.setGeometry(QtCore.QRect(480, 350, 61, 31))
        self.search_clearbutton.setObjectName("search_clearbutton")
        self.searchbar = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.searchbar.setGeometry(QtCore.QRect(540, 350, 181, 31))
        self.searchbar.setObjectName("searchbar")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 805, 25))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.saerchbutton.setText(_translate("MainWindow", "Search"))
        self.stop_button.setText(_translate("MainWindow", "stop"))
        self.clearbutton.setText(_translate("MainWindow", "Clear"))
        self.search_clearbutton.setText(_translate("MainWindow", "Clear"))
        self.stop_button.clicked.connect(self.stop)
        self.clearbutton.clicked.connect(self.clear)
    
    def start(self):
        print("start function is running!!!")
        self.sniffer=sniff_object()
        self.sniffer.packet_signal.connect(self.add_packet)
        self.sniffer.IP_signal.connect(self.add_ip)
        self.sniffer.start()
    def stop(self):
        self.sniffer.terminate()

    def clear(self):
        self.mainmonitor.setHtml(self.panda_banner)
        self.recorded_ips.clear()
        self.IPs.setHtml(self.panda3_logo)
        
    def add_packet(self,packet):

        current_packets=self.mainmonitor.document().toHtml()
        new_packet=packet
        appended_packets=new_packet+current_packets
        self.mainmonitor.setHtml(appended_packets)
    
    def add_ip(self,IP):
        if not IP in self.recorded_ips:
            print(IP)
            color=choice(self.colors)
            new_ip=f"<font color='black'>-----------------------------</font><font color='{color}'>{IP}<font>"
            previous_text=self.IPs.document().toHtml()
            appended_text=new_ip+previous_text
            self.IPs.setHtml(appended_text)
            self.recorded_ips.append(IP)

class sniff_object(QThread):
    IP_signal=pyqtSignal(str)
    packet_signal=pyqtSignal(str)
    errorsignal=pyqtSignal(int)
    def run(self):
        try:
            print("scapy loop is about to run")
            scapy.sniff(prn=self.packet_handle,store=0)
        except Exception as e:
            print(f"Excetion occured: {e}")
    def make_ip(self,packet,type):
        ip_info = f"<font color='blue'>{packet[scapy.IP].src}--></font> --> " \
              f"<font color='green'>{packet[scapy.IP].dst}</font>, " \
              f"p:<font color='purple'>{packet[scapy.IP].proto}</font><font color='black'> | {type}</font>"
        return ip_info

    def make_icmp(self, packet):
        icmp_info = f"ICMP: Type: <font color='blue'>{packet[scapy.ICMP].type}</font>, " \
                    f"Code: <font color='green'>{packet[scapy.ICMP].code}</font>"
        return f"{icmp_info}"

    def make_udp(self, packet):
        destination_ip = ""
        if packet.haslayer(scapy.IP):
            destination_ip = f"Destination IP: <font color='orange'>{packet[scapy.IP].dst}</font>"

        udp_info = f"UDP: Source Port: <font color='blue'>{packet[scapy.UDP].sport}</font>, " \
               f"Destination Port: <font color='green'>{packet[scapy.UDP].dport}</font>, " \
               f"Length: <font color='purple'>{packet[scapy.UDP].len}</font>"

        return f"{udp_info},{destination_ip} "

    def make_tcp(self, packet):
        destination_ip = ""
        if packet.haslayer(scapy.IP):
            destination_ip = f"Destination IP: <font color='orange'>{packet[scapy.IP].dst}</font>"

        tcp_info = f"TCP: Source Port: <font color='blue'>{packet[scapy.TCP].sport}</font>, " \
                f"Destination Port: <font color='green'>{packet[scapy.TCP].dport}</font>, " \
                f"Window: <font color='purple'>{packet[scapy.TCP].window}</font>, " \
                f"Seq: <font color='orange'>{packet[scapy.TCP].seq}</font>, " \
                f"Ack: <font color='red'>{packet[scapy.TCP].ack}</font>, " \
                f"Reserved: <font color='brown'>{packet[scapy.TCP].reserved}</font>, " \
                f"Flags: <font color='black'>{packet[scapy.TCP].flags}</font>, " \
                f"Options: <font color='darkblue'>{packet[scapy.TCP].options}</font>"

        return f"{tcp_info},{destination_ip}"

    def make_arp(self, packet):
        arp_info = f"ARP: Sender IP: <font color='blue'>{packet[scapy.ARP].psrc}</font>, " \
               f"Sender MAC: <font color='green'>{packet[scapy.ARP].hwsrc}</font>, " \
               f"Target IP: <font color='purple'>{packet[scapy.ARP].pdst}</font>, " \
               f"Target MAC: <font color='orange'>{packet[scapy.ARP].hwdst}</font>"

        return arp_info
    def make_http(self, packet):
        http_info = f"HTTP: Method: <font color='blue'>{packet[scapy.HTTPRequest].Method.decode()}</font>, " \
                f"Path: <font color='green'>{packet[scapy.HTTPRequest].Path.decode()}</font>, " \
                f"Host: <font color='purple'>{packet[scapy.HTTPRequest].Host.decode()}</font>, " \
                f"User-Agent: <font color='orange'>{packet[scapy.HTTPRequest].User_Agent.decode()}</font>"

        return http_info

    def make_dns(self, packet):
        dns_info = f"DNS: Transaction ID: <font color='blue'>{packet[scapy.DNS].id}</font>, " \
               f"Flags: <font color='green'>{packet[scapy.DNS].flags}</font>, " \
               f"Questions: <font color='purple'>{len(packet[scapy.DNS].qd)}</font>, " \
               f"Answers: <font color='orange'>{len(packet[scapy.DNS].an)}</font>, " \
               f"Authority RRs: <font color='red'>{len(packet[scapy.DNS].ns)}</font>, " \
               f"Additional RRs: <font color='brown'>{len(packet[scapy.DNS].ar)}</font>"

        return dns_info
    
    def make_tls(self, packet):
        tls_info = f"TLS: Record Length: <font color='blue'>{packet[scapy.TLSRecord].length}</font>, " \
               f"Content Type: <font color='green'>{packet[scapy.TLSRecord].type}</font>, " \
               f"Version: <font color='purple'>{packet[scapy.TLSRecord].version}</font>, " \
               f"Cipher Suites: <font color='orange'>{packet[scapy.TLSRecord].cipher_suites}</font>"

        return tls_info
    
    def make_dhcp(self, packet):
        dhcp_info = f"DHCP: Transaction ID: <font color='blue'>{packet[scapy.DHCP].xid}</font>, " \
                f"Options: <font color='green'>{packet[scapy.DHCP].options}</font>, " \
                f"Operation: <font color='purple'>{packet[scapy.DHCP].options[0][1]}</font>, " \
                f"Client MAC: <font color='orange'>{packet[scapy.DHCP].chaddr}</font>"

        return dhcp_info

    def make_sip(self, packet):
        sip_info = f"SIP: Request Line: <font color='blue'>{packet[scapy.SIPRequest].Request_Line}</font>, " \
               f"Method: <font color='green'>{packet[scapy.SIPRequest].Method}</font>, " \
               f"URI: <font color='purple'>{packet[scapy.SIPRequest].URI}</font>, " \
               f"Call-ID: <font color='orange'>{packet[scapy.SIPRequest].Call_ID}</font>, " \
               f"CSeq: <font color='red'>{packet[scapy.SIPRequest].CSeq}</font>"

        return sip_info

    def packet_handle(self, packet):
        print("got the packet")
        new_packet=""
        if packet.haslayer(scapy.TCP):
            new_packet = self.make_tcp(packet)
            if packet.haslayer(scapy.IP):
                try:
                    ip_packet=self.make_ip(packet,"TCP")
                    self.IP_signal.emit(ip_packet)
                except Exception as e:
                    print(e)

        elif packet.haslayer(scapy.UDP):
            new_packet = self.make_udp(packet)
            if packet.haslayer(scapy.IP):
                try:
                    ip_packet=self.make_ip(packet,"UDP")
                    self.IP_signal.emit(ip_packet)
                except Exception as e:
                    print(e)
        elif packet.haslayer(scapy.ARP):
            new_packet = self.make_arp(packet)
            if packet.haslayer(scapy.IP):
                try:
                    ip_packet=self.make_ip(packet,"ARP")
                    self.IP_signal.emit(ip_packet)
                except Exception as e:
                    print(e)

        elif packet.haslayer(scapy.DNS):
            new_packet = self.make_dns(packet)

        elif packet.haslayer(scapy.DHCP):
            new_packet = self.make_dhcp(packet)

        else:
            pass
        
        self.packet_signal.emit(new_packet)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    ui.start()
    sys.exit(app.exec_())


#now i have copy and performed the crafted packets i just have to create lists signals to add IPs in the IP box and make sure the copird code is synchronizing perfectly